""" List Operation on list """

items = [1, 2, 3, 4, 5]
squared = []
for x in items:
	squared.append(x ** 2)

	
print(squared)
"""O/P:  [1, 4, 9, 16, 25] """

""" Same with MAP """

def fun(x):
    return x**2
itm=[2,3,4,5,6,7,8,9]	
ab=map(fun,itm)
print(ab)	

""" o/p: [4, 9, 16, 25, 36, 49, 64, 81]"""

""" Using funcions as a sequence and lambda as a function """
def square(x):
    return x**2
def cube(x):
    return x**3
sequence=[square,cube]

for i in range(5):
    value = map(lambda x : x(i) , sequence)#here value of x is taken from the sequence and for every value it will call the coresponding function 
                                           #example for the first time the value of x is square and the next time is cube and so on 	
    print(value)
	
	
""" O/P: [0, 0]
[1, 1]
[4, 8]
[9, 27]
[16, 64] """


""" Writing your own map function """
def fun(x):
    return x**2
def my_map(func , seq):
    temp_list=[]
    for i in seq:
	    temp_list.append(func(i))
    return temp_list	
li=my_map(fun , [1,2,3,4,5,6])
print(li)


""" O/P: [1,4,9,16,25,36] """


""" Experiment """
print(map(lambda x,y : x*y,[1,2,3,4],[9,8,7,6]))#it wil take the first argument from both the sequence and call the lambda it can be genrelised

""" O/P: [9, 16, 21, 24] """
#print(map(lambda x,y : x*y,[1,2,3,4],[9,8,7]))# will give a error because both the sequence are not of same length

""" The map call is similar to the list comprehension expression. But map applies a function call to each item instead of an arbitrary expression.
 Because of this limitation, it is somewhat less general tool. In some cases, however, map may be faster to run than a list comprehension such as 
 when mapping a built-in function. And map requires less coding. """


""" If function is None, the identity function is assumed; if there are multiple arguments, map() returns a list consisting of tuples containing the
 corresponding items from all iterables (a kind of transpose operation). The iterable arguments may be a sequence or any iterable object; the result is always a list: """
 #EXAMPLE
 
l1=[1,2,3]
l2=[1,2,3]
 
print(map(None,l1,l2))

#o/p: [(1, 1), (2, 2), (3, 3)]








































