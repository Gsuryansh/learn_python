9.7. The range function
Lists that contain consecutive integers are common, so Python provides a simple way to create them:

>>> range(1, 5)
[1, 2, 3, 4]
The range function takes two arguments and returns a list that contains all the integers from the first to the second, including the first but not the second.

There are two other forms of range. With a single argument, it creates a list that starts at 0:

>>> range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
If there is a third argument, it specifies the space between successive values, which is called the step size. This example counts from 1 to 10 by steps of 2:

>>> range(1, 10, 2)
[1, 3, 5, 7, 9]
If the step size is negative, then start must be greater than stop

>>> range(20, 4, -5)
[20, 15, 10, 5]
or the result will be an empty list.

>>> range(10, 20, -5)
[]

###################################################3

List are mutable means u can change the vaue of list element


######################################################



9.9. List deletion
Using slices to delete list elements can be awkward, and therefore error-prone. Python provides an alternative that is more readable.

del removes an element from a list:

>>> a = ['one', 'two', 'three']
>>> del a[1]
>>> a
['one', 'three']
As you might expect, del handles negative indices and causes a runtime error if the index is out of range.

You can use a slice as an index for del:

>>> a_list = ['a', 'b', 'c', 'd', 'e', 'f']
>>> del a_list[1:5]
>>> print a_list
['a', 'f']


#########################################################################################


a function which take the argument nd modify them during execution are called modifires .
pure function does not modify the argument

##########################################################################################




9.10. Objects and values
If we execute these assignment statements,

a = "banana"
b = "banana"
we know that a and b will refer to a string with the letters "banana". But we don’t know yet whether they point to the same string.

There are two possible states:

Two state diagrams for multiple references with strings
In one case, a and b refer to two different things that have the same value. In the second case, they refer to the same thing. These things have names — they are called objects. An object is something a variable can refer to.

We can test whether two names have the same value using ==:

>>> a == b
True
We can test whether two names refer to the same object using the is operator:

>>> a is b
True
This tells us that both a and b refer to the same object, and that it is the second of the two state diagrams that describes the relationship.

Since strings are immutable, Python optimizes resources by making two names that refer to the same string value refer to the same object.

This is not the case with lists:

>>> a = [1, 2, 3]
>>> b = [1, 2, 3]
>>> a == b
True
>>> a is b
False
The state diagram here looks like this:

State diagram for equal different lists
a and b have the same value but do not refer to the same object.

9.11. Aliasing
Since variables refer to objects, if we assign one variable to another, both variables refer to the same object:

>>> a = [1, 2, 3]
>>> b = a
>>> a is b
True
In this case, the state diagram looks like this:

State diagram for multiple references (aliases) to a list
Because the same list has two different names, a and b, we say that it is aliased. Changes made with one alias affect the other:

>>> b[0] = 5
>>> print a
[5, 2, 3]
Although this behavior can be useful, it is sometimes unexpected or undesirable. In general, it is safer to avoid aliasing when you are working with mutable objects. Of course, for immutable objects, there’s no problem. That’s why Python is free to alias strings when it sees an opportunity to economize.

9.12. Cloning lists
If we want to modify a list and also keep a copy of the original, we need to be able to make a copy of the list itself, not just the reference. This process is sometimes called cloning, to avoid the ambiguity of the word copy.

The easiest way to clone a list is to use the slice operator:

>>> a = [1, 2, 3]
>>> b = a[:]
>>> print b
[1, 2, 3]
Taking any slice of a creates a new list. In this case the slice happens to consist of the whole list.

Now we are free to make changes to b without worrying about a:

>>> b[0] = 5
>>> print a
[1, 2, 3]


################################################################################################################################


9.20. Strings and lists
Python has a command called list that takes a sequence type as an argument and creates a list out of its elements.

>>> list("Crunchy Frog")
['C', 'r', 'u', 'n', 'c', 'h', 'y', ' ', 'F', 'r', 'o', 'g']
There is also a str command that takes any Python value as an argument and returns a string representation of it.

>>> str(5)
'5'
>>> str(None)
'None'
>>> str(list("nope"))
"['n', 'o', 'p', 'e']"
As we can see from the last example, str can’t be used to join a list of characters together. To do this we could use the join function in the string module:

>>> import string
>>> char_list = list("Frog")
>>> char_list
['F', 'r', 'o', 'g']
>>> string.join(char_list, '')
'Frog'
Two of the most useful functions in the string module involve lists of strings. The split function breaks a string into a list of words. By default, any number of whitespace characters is considered a word boundary:

>>> import string
>>> song = "The rain in Spain..."
>>> string.split(song)
['The', 'rain', 'in', 'Spain...']
An optional argument called a delimiter can be used to specify which characters to use as word boundaries. The following example uses the string ai as the delimiter:

>>> string.split(song, 'ai')
['The r', 'n in Sp', 'n...']
Notice that the delimiter doesn’t appear in the list.

string.join is the inverse of string.split. It takes two arguments: a list of strings and a separator which will be placed between each element in the list in the resultant string.

>>> import string
>>> words = ['crunchy', 'raw', 'unboned', 'real', 'dead', 'frog']
>>> string.join(words, ' ')
'crunchy raw unboned real dead frog'
>>> string.join(words, '**')
'crunchy**raw**unboned**real**dead**frog'



















